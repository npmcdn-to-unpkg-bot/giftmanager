
        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

         COMMENT LIST & SUBMIT

         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


// tutorial12.js
        var CommentBox = React.createClass({



            loadCommentsFromServer: function() {
                $.ajax({
                    url: this.props.commentsUrl,
                    dataType: 'json',
                    cache: false,
                    success: function(data) {
                        this.setState({data: data});
                    }.bind(this),
                    error: function(xhr, status, err) {
                        console.error(this.props.commentsUrl, status, err.toString());
                    }.bind(this)
                });
            },

            getInitialState: function() {
                return {
                    data: []
                };
            },
            componentDidMount: function() {
                this.loadCommentsFromServer();
                if(this.props.pollInterval) {
                    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
                }
            },

            handleCommentSubmit: function(comment) {

                var comments = this.state.data;
                // Optimistically set an id on the new comment. It will be replaced by an
                // id generated by the server. In a production application you would likely
                // not use Date.now() for this and would have a more robust system in place.
                comment.id = Date.now();
                var newComments = comments.concat([comment]);
                this.setState({data: newComments});

                $.ajax({
                    url: this.props.commentsUrl,
                    dataType: 'json',
                    type: 'POST',
                    data: comment,
                    success: function(data) {
                        this.setState({data: data});
                    }.bind(this),
                    error: function(xhr, status, err) {
                        this.setState({data: comments}); //hhhhmmmm...  don't know that I agree with this. updates list if an error occurs?
                        console.error(this.props.url, status, err.toString());
                    }.bind(this)
                });
            },

            render: function() {
                return (

                        <div className="commentBox">
                            <h1>Comments</h1>
                            <CommentList data={this.state.data} />
                            <CommentForm onCommentSubmit={this.handleCommentSubmit} />
                        </div>
                );
            }
        });



        // tutorial2.js
// tutorial10.js
        var CommentList = React.createClass({
            render: function() {
                var commentNodes = this.props.data.map(function(comment) {
                    return (
                            <Comment comment={comment} key={comment.itemid}>
                            </Comment>
                    );
                });
                return (
                        <table className="table">
                            <tbody>
                            {commentNodes}
                            </tbody>
                        </table>
                );
            }
        });


        var CommentForm = React.createClass({
            getInitialState: function() {
                return {
                            "itemid" : "", //GUID
                            "userid" : "", //userid of user who's list this is on.
                            "item_name" : "", //short text name of item.
                            "item_link" : "", //URL of item (optional)
                            "item_desc" : "", //blob - description (optional)
                            "item_type" : "", //not used
                            "status" : "", //0 = default.
                            "remove" : "", //set to 1 if the user has taken the item off their list.
                            "create_date" : "", //not used
                            "reserve_date" : "", //not used
                            "buy_date" : "", //not used
                            "received_date" : "", //not used
                            "buy_userid" : "", //The userid of the purchaser
                            "archive" : "" //set to 1 if item has been archived by administrator
                          };
            },
            handleAuthorChange: function(e) {
                this.setState({author: e.target.value});
            },
            handleTextChange: function(e) {
                this.setState({text: e.target.value});
            },
            handleSubmit: function(e) {
                e.preventDefault();
                window.console.log("got to the onsubmit");
                var author = this.state.author.trim();
                var text = this.state.text.trim();
                if (!text || !author) {
                    return;
                }
                this.props.onCommentSubmit({author: author, text: text});
                this.setState({author: '', text: ''});
            },

            render: function() {
                return (
                        <form className="commentForm" onSubmit={this.handleSubmit}>
                            <input
                                    type="text"
                                    placeholder="Your name"
                                    value={this.state.author}
                                    onChange={this.handleAuthorChange}
                            />
                            <input
                                    type="text"
                                    placeholder="Say something..."
                                    value={this.state.text}
                                    onChange={this.handleTextChange}
                            />
                            <input type="submit" value="Post" />
                        </form>
                );
            }
        });




// tutorial7.js
        var Comment = React.createClass({

            handleInfoClick: function(e) {
            console.log("got here");
                this.setState({show_description: true});
                console.log(this);
            },

            render: function() {
                return (
                        <tr className="comment">

                            <td className="commentAuthor">
                                <a href='#' onClick={this.handleInfoClick} className={this.props.comment.item_desc ? ''  : 'hidden-xs-up'}>i</a>
                                {this.props.comment.show_description ? <div>{this.props.comment.item_desc}</div> : ""}
                            </td>

                            <td>
                                {this.props.comment.item_name}
                            </td>

                            <td>
                                <a href={this.props.comment.item_link} target='_blank' className={this.props.comment.item_link ? ''  : 'hidden-xs-up'}>link</a>
                            </td>
                        </tr>
                );
            }
        });



        ReactDOM.render(

                <CommentBox commentsUrl="api/list.json" pollInterval={0} />,
                document.getElementById('content')
        );
